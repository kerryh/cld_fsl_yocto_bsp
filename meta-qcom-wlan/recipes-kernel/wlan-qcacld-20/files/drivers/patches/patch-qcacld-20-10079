diff --git a/CORE/HDD/src/wlan_hdd_cfg80211.c b/CORE/HDD/src/wlan_hdd_cfg80211.c
index 495fd88..ed36c79 100644
--- a/CORE/HDD/src/wlan_hdd_cfg80211.c
+++ b/CORE/HDD/src/wlan_hdd_cfg80211.c
@@ -188,7 +188,7 @@ static const u32 hdd_cipher_suites[] =
     WLAN_CIPHER_SUITE_AES_CMAC,
 #endif
 };
-
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
 #ifndef QCA_WIFI_2_0
 static inline int is_broadcast_ether_addr(const u8 *addr)
 {
@@ -196,7 +196,15 @@ static inline int is_broadcast_ether_addr(const u8 *addr)
             (addr[3] == 0xff) && (addr[4] == 0xff) && (addr[5] == 0xff));
 }
 #endif
-
+#else
+#ifdef QCA_WIFI_2_0
+static inline int is_broadcast_ether_addr(const u8 *addr)
+{
+    return ((addr[0] == 0xff) && (addr[1] == 0xff) && (addr[2] == 0xff) &&
+            (addr[3] == 0xff) && (addr[4] == 0xff) && (addr[5] == 0xff));
+}
+#endif
+#endif
 static struct ieee80211_channel hdd_channels_2_4_GHZ[] =
 {
     HDD2GHZCHAN(2412, 1, 0) ,
@@ -304,6 +312,7 @@ static struct ieee80211_supported_band wlan_hdd_band_2_4_GHZ =
     .ht_cap.mcs.rx_mask    = { 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
     .ht_cap.mcs.rx_highest = cpu_to_le16( 72 ),
     .ht_cap.mcs.tx_params  = IEEE80211_HT_MCS_TX_DEFINED,
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
 #ifdef QCA_WIFI_2_0
     .vht_cap.cap = IEEE80211_VHT_CAP_MAX_MPDU_LENGTH_11454
                             | IEEE80211_VHT_CAP_SHORT_GI_80
@@ -313,6 +322,7 @@ static struct ieee80211_supported_band wlan_hdd_band_2_4_GHZ =
                               | IEEE80211_VHT_CAP_RXSTBC_2))
                             | IEEE80211_VHT_CAP_RXLDPC,
 #endif
+#endif
 };
 
 static struct ieee80211_supported_band wlan_hdd_band_p2p_2_4_GHZ =
@@ -353,6 +363,7 @@ static struct ieee80211_supported_band wlan_hdd_band_5_GHZ =
     .ht_cap.mcs.rx_mask    = { 0xff, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
     .ht_cap.mcs.rx_highest = cpu_to_le16( 72 ),
     .ht_cap.mcs.tx_params  = IEEE80211_HT_MCS_TX_DEFINED,
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
     .vht_cap.vht_supported = 1,
     .vht_cap.cap = IEEE80211_VHT_CAP_MAX_MPDU_LENGTH_11454
                  | IEEE80211_VHT_CAP_SHORT_GI_80
@@ -361,6 +372,7 @@ static struct ieee80211_supported_band wlan_hdd_band_5_GHZ =
                    ( IEEE80211_VHT_CAP_RXSTBC_1
                    | IEEE80211_VHT_CAP_RXSTBC_2))
                  | IEEE80211_VHT_CAP_RXLDPC
+#endif
 };
 
 /* This structure contain information what kind of frame are expected in
@@ -677,7 +689,7 @@ int wlan_hdd_send_avoid_freq_event(hdd_context_t *pHddCtx,
     return 0;
 }
 #endif /* FEATURE_WLAN_CH_AVOID */
-
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
 /* vendor specific events */
 static const struct nl80211_vendor_cmd_info wlan_hdd_cfg80211_vendor_events[] =
 {
@@ -736,7 +748,7 @@ const struct wiphy_vendor_command hdd_wiphy_vendor_commands[] =
         .doit = is_driver_dfs_capable
     }
 };
-
+#endif
 
 /*
  * FUNCTION: wlan_hdd_cfg80211_wiphy_alloc
@@ -862,8 +874,10 @@ int wlan_hdd_cfg80211_init(struct device *dev,
                  |  WIPHY_FLAG_AP_PROBE_RESP_OFFLOAD
                  |  WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL
                     | WIPHY_FLAG_OFFCHAN_TX;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
     wiphy->country_ie_pref = NL80211_COUNTRY_IE_IGNORE_CORE;
 #endif
+#endif
 
     wiphy->wowlan.flags = WIPHY_WOWLAN_MAGIC_PKT;
     wiphy->wowlan.n_patterns = WOWL_MAX_PTRNS_ALLOWED;
@@ -921,7 +935,9 @@ int wlan_hdd_cfg80211_init(struct device *dev,
 
     wiphy->max_scan_ie_len = SIR_MAC_MAX_IE_LENGTH;
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
     wiphy->max_acl_mac_addrs = MAX_ACL_MAC_ADDRESS;
+#endif
 
     /* Supports STATION & AD-HOC modes right now */
     wiphy->interface_modes =   BIT(NL80211_IFTYPE_STATION)
@@ -1007,6 +1023,7 @@ int wlan_hdd_cfg80211_init(struct device *dev,
     wiphy->max_remain_on_channel_duration = 1000;
 #endif
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
     wiphy->n_vendor_commands = ARRAY_SIZE(hdd_wiphy_vendor_commands);
     wiphy->vendor_commands = hdd_wiphy_vendor_commands;
 
@@ -1014,7 +1031,7 @@ int wlan_hdd_cfg80211_init(struct device *dev,
     wiphy->n_vendor_events = ARRAY_SIZE(wlan_hdd_cfg80211_vendor_events);
 
     wiphy->flags |= WIPHY_FLAG_DFS_OFFLOAD;
-
+#endif
     EXIT();
     return 0;
 }
@@ -9505,6 +9522,7 @@ int wlan_hdd_cfg80211_set_rekey_data(struct wiphy *wiphy, struct net_device *dev
 }
 #endif /*WLAN_FEATURE_GTK_OFFLOAD*/
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
 /*
  * FUNCTION: wlan_hdd_cfg80211_set_mac_acl
  * This function is used to set access control policy
@@ -9636,6 +9654,7 @@ static int wlan_hdd_cfg80211_set_mac_acl(struct wiphy *wiphy,
 
     return 0;
 }
+#endif
 
 #ifdef WLAN_NL80211_TESTMODE
 #ifdef FEATURE_WLAN_LPHB
@@ -10265,7 +10284,9 @@ static struct cfg80211_ops wlan_hdd_cfg80211_ops =
 #endif /*FEATURE_WLAN_SCAN_PNO */
      .resume = wlan_hdd_cfg80211_resume_wlan,
      .suspend = wlan_hdd_cfg80211_suspend_wlan,
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
      .set_mac_acl = wlan_hdd_cfg80211_set_mac_acl,
+#endif
 #ifdef WLAN_NL80211_TESTMODE
      .testmode_cmd = wlan_hdd_cfg80211_testmode,
 #endif
diff --git a/CORE/HDD/src/wlan_hdd_main.c b/CORE/HDD/src/wlan_hdd_main.c
index 5630974..577312d 100644
--- a/CORE/HDD/src/wlan_hdd_main.c
+++ b/CORE/HDD/src/wlan_hdd_main.c
@@ -3113,7 +3113,7 @@ static int hdd_driver_command(hdd_adapter_t *pAdapter,
            vos_mem_free(buf);
 
            wlan_hdd_action( NULL,
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,6,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,7))
                        &(pAdapter->wdev),
 #else
                        dev,
diff --git a/CORE/HDD/src/wlan_hdd_tx_rx.c b/CORE/HDD/src/wlan_hdd_tx_rx.c
index d8b8218..03b5240 100644
--- a/CORE/HDD/src/wlan_hdd_tx_rx.c
+++ b/CORE/HDD/src/wlan_hdd_tx_rx.c
@@ -2192,6 +2192,7 @@ VOS_STATUS hdd_rx_packet_cbk(v_VOID_t *vosContext,
    }
 
    pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
    if ((pHddStaCtx->conn_info.proxyARPService) &&
          cfg80211_is_gratuitous_arp_unsolicited_na(skb))
    {
@@ -2201,7 +2202,7 @@ VOS_STATUS hdd_rx_packet_cbk(v_VOID_t *vosContext,
         kfree_skb(skb);
         return VOS_STATUS_SUCCESS;
    }
-
+#endif
 #ifdef FEATURE_WLAN_TDLS
 #ifndef QCA_WIFI_2_0
     if ((eTDLS_SUPPORT_ENABLED == pHddCtx->tdls_mode) &&
diff --git a/CORE/VOSS/src/vos_nvitem.c b/CORE/VOSS/src/vos_nvitem.c
index a675ad0..850d95c 100644
--- a/CORE/VOSS/src/vos_nvitem.c
+++ b/CORE/VOSS/src/vos_nvitem.c
@@ -903,7 +903,11 @@ vos_reg_apply_beaconing_flags(struct wiphy *wiphy,
             continue;
 
          if (initiator == NL80211_REGDOM_SET_BY_COUNTRY_IE) {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
             reg_rule = freq_reg_info(wiphy, MHZ_TO_KHZ(ch->center_freq));
+#else
+			reg_rule = freq_reg_info(wiphy, MHZ_TO_KHZ(ch->center_freq), NULL, NULL);
+#endif
             if (IS_ERR(reg_rule))
                continue;
             /*
@@ -966,7 +970,11 @@ vos_reg_apply_active_scan_flags(struct wiphy *wiphy,
     */
 
    ch = &sband->channels[11]; /* CH 12 */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
    reg_rule = freq_reg_info(wiphy, MHZ_TO_KHZ(ch->center_freq));
+#else
+   reg_rule = freq_reg_info(wiphy, MHZ_TO_KHZ(ch->center_freq), NULL, NULL);
+#endif
    if (!IS_ERR(reg_rule)) {
       if (!(reg_rule->flags & NL80211_RRF_PASSIVE_SCAN))
          if (ch->flags & IEEE80211_CHAN_PASSIVE_SCAN)
@@ -974,7 +982,11 @@ vos_reg_apply_active_scan_flags(struct wiphy *wiphy,
    }
 
    ch = &sband->channels[12]; /* CH 13 */
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,9,0))
    reg_rule = freq_reg_info(wiphy, MHZ_TO_KHZ(ch->center_freq));
+#else
+   reg_rule = freq_reg_info(wiphy, MHZ_TO_KHZ(ch->center_freq), NULL, NULL);
+#endif
    if (!IS_ERR(reg_rule)) {
       if (!(reg_rule->flags & NL80211_RRF_PASSIVE_SCAN))
          if (ch->flags & IEEE80211_CHAN_PASSIVE_SCAN)
diff --git a/Kbuild b/Kbuild
index 57ff908..3719334 100644
--- a/Kbuild
+++ b/Kbuild
@@ -28,20 +28,20 @@ ifeq ($(KERNEL_BUILD), 0)
 	CONFIG_PRIMA_WLAN_OKC := y
 
 	# JB kernel has CPU enablement patches, so enable
-	CONFIG_PRIMA_WLAN_11AC_HIGH_TP := y
+	CONFIG_PRIMA_WLAN_11AC_HIGH_TP := n
 
 	#Flag to enable TDLS feature
-	CONFIG_QCOM_TDLS := y
+	CONFIG_QCOM_TDLS := n
 
 	#Flag to enable Fast Transition (11r) feature
-	CONFIG_QCOM_VOWIFI_11R := y
+	CONFIG_QCOM_VOWIFI_11R := n
 
         ifneq ($(CONFIG_QCA_CLD_WLAN),)
                 ifeq ($(CONFIG_CNSS),y)
         #Flag to enable Protected Managment Frames (11w) feature
                 CONFIG_WLAN_FEATURE_11W := y
         #Flag to enable LTE CoEx feature
-                CONFIG_QCOM_LTE_COEX := y
+                CONFIG_QCOM_LTE_COEX := n
                 endif
         endif
 
@@ -842,7 +842,6 @@ CDEFINES :=	-DANI_LITTLE_BYTE_ENDIAN \
 		-DWLAN_PERF \
 		-DPTT_SOCK_SVC_ENABLE \
 		-Wall\
-		-Werror\
 		-D__linux__ \
 		-DHAL_SELF_STA_PER_BSS=1 \
 		-DWLAN_FEATURE_VOWIFI_11R \
